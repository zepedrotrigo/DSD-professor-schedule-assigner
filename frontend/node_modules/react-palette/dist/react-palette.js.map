{"version":3,"file":"react-palette.js","sources":["../src/getPalette.ts","../src/usePalette.tsx","../src/Palette.tsx"],"sourcesContent":["import Vibrant from \"node-vibrant\";\r\nimport camelCase from \"lodash.camelcase\";\r\nimport invoke from 'lodash.invoke';\r\n\r\nexport type PaletteColors = {\r\n  vibrant?: string;\r\n  muted?: string;\r\n  darkVibrant?: string;\r\n  darkMuted?: string;\r\n  lightVibrant?: string;\r\n  lightMuted?: string;\r\n  [name: string]: string | undefined;\r\n};\r\n\r\nexport async function getPalette(src: string) {\r\n  const palette = await Vibrant.from(src).getPalette();\r\n  const setPaletteColor = (acc, paletteName) => ({\r\n    ...acc,\r\n    [camelCase(paletteName)]: invoke(palette, [paletteName, 'getHex'])\r\n  });\r\n\r\n  return Object.keys(palette).reduce<PaletteColors>(setPaletteColor, {});\r\n}\r\n","import React from \"react\";\r\nimport { getPalette, PaletteColors } from \"./getPalette\";\r\n\r\nexport type PaletteState = {\r\n  loading: boolean;\r\n  error?: Error;\r\n  data: PaletteColors;\r\n};\r\n\r\nconst initialState: PaletteState = {\r\n  loading: true,\r\n  data: {},\r\n  error: undefined,\r\n};\r\n\r\nfunction reducer(state: PaletteState, action): PaletteState {\r\n  switch (action.type) {\r\n    case \"getPalette\":\r\n      return initialState;\r\n    case \"resolvePalette\":\r\n      return { ...state, data: action.payload, loading: false };\r\n    case \"rejectPalette\":\r\n      return { ...state, error: action.payload, loading: false };\r\n  }\r\n}\r\n\r\nexport function usePalette(src: string) {\r\n  const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n  React.useEffect(() => {\r\n    dispatch({ type: \"getPalette\" });\r\n\r\n    getPalette(src)\r\n      .then((palette) => {\r\n        dispatch({ type: \"resolvePalette\", payload: palette });\r\n      })\r\n      .catch((ex) => {\r\n        dispatch({ type: \"rejectPalette\", payload: ex });\r\n      });\r\n  }, [src]);\r\n\r\n  return state;\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { PaletteState, usePalette } from \"./usePalette\";\r\n\r\nexport type PaletteProps = {\r\n  src: string;\r\n  children(palette: PaletteState): ReactNode;\r\n};\r\n\r\nexport const Palette: React.FC<PaletteProps> = ({\r\n  src,\r\n  children\r\n}: PaletteProps) => {\r\n  const palette = usePalette(src);\r\n\r\n  return <>{children(palette)}</>;\r\n};\r\n"],"names":["getPalette","src","Vibrant","from","palette","Object","keys","reduce","acc","paletteName","camelCase","invoke","initialState","loading","data","error","undefined","reducer","state","action","type","payload","usePalette","React","useReducer","useEffect","dispatch","then","catch","ex","Palette","ref","children"],"mappings":"4LAcsBA,WAAWC,8BACTC,EAAQC,KAAKF,GAAKD,4BAAlCI,UAMCC,OAAOC,KAAKF,GAASG,gBALHC,EAAKC,gBAAiBJ,iBAC1CG,UACFE,EAAUD,IAAeE,EAAOP,EAAS,CAACK,EAAa,gBAGS,0CCZ/DG,EAA6B,CACjCC,SAAS,EACTC,KAAM,GACNC,WAAOC,GAGT,SAASC,EAAQC,EAAqBC,UAC5BA,EAAOC,UACR,oBACIR,MACJ,wBACIP,iBAAKa,GAAOJ,KAAMK,EAAOE,QAASR,SAAS,QAC/C,uBACIR,iBAAKa,GAAOH,MAAOI,EAAOE,QAASR,SAAS,cAIzCS,EAAWrB,SACCsB,EAAMC,WAAWP,EAASL,wBAEpDW,EAAME,qBACJC,EAAS,CAAEN,KAAM,eAEjBpB,EAAWC,GACR0B,cAAMvB,GACLsB,EAAS,CAAEN,KAAM,iBAAkBC,QAASjB,MAE7CwB,eAAOC,GACNH,EAAS,CAAEN,KAAM,gBAAiBC,QAASQ,OAE9C,CAAC5B,IAEGiB,MCjCIY,WAAmCC,oBAIxC3B,EAAUkB,gBAETC,gCAAGS,EAAS5B"}