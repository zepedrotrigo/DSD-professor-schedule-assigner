{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar RelativeTimeFormat; // -- Utilities ----------------------------------------------------------------\n\nfunction getCacheId(inputs) {\n  return JSON.stringify(inputs.map(function (input) {\n    return input && typeof input === 'object' ? orderedProps(input) : input;\n  }));\n}\n\nfunction orderedProps(obj) {\n  return Object.keys(obj).sort().map(function (k) {\n    var _a;\n\n    return _a = {}, _a[k] = obj[k], _a;\n  });\n}\n\nvar memoizeFormatConstructor = function (FormatConstructor, cache) {\n  if (cache === void 0) {\n    cache = {};\n  }\n\n  return function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var cacheId = getCacheId(args);\n    var format = cacheId && cache[cacheId];\n\n    if (!format) {\n      format = new ((_a = FormatConstructor).bind.apply(_a, [void 0].concat(args)))();\n\n      if (cacheId) {\n        cache[cacheId] = format;\n      }\n    }\n\n    return format;\n  };\n};\n\nexport default memoizeFormatConstructor;","map":{"version":3,"mappings":"AAAA;;;;;AAuBA,IAAIA,kBAAJ,C,CAeA;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAAiC;AAC/B,SAAOC,IAAI,CAACC,SAAL,CACLF,MAAM,CAACG,GAAP,CAAW,iBAAK;AACd,gBAAK,IAAI,OAAOC,KAAP,KAAiB,QAA1B,GAAqCC,YAAY,CAACD,KAAD,CAAjD,GAA2DA,KAA3D;AAAgE,GADlE,CADK,CAAP;AAKD;;AAED,SAASC,YAAT,CAAsBC,GAAtB,EAA8C;AAC5C,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EACJG,IADI,GAEJN,GAFI,CAEA,aAAC;;;AAAI,oBAAGO,GAACC,CAAD,IAAKL,GAAG,CAACK,CAAD,CAAX,EAAcD,EAAd;AAAiB,GAFtB,CAAP;AAGD;;AAeD,IAAME,wBAAwB,GAA+B,UAC3DC,iBAD2D,EAE3DC,KAF2D,EAE5B;AAA/B;AAAAA;AAA+B;;AAC5B;;;AAAC;;SAAA,yCAAc;AAAdC;;;AACJ,QAAMC,OAAO,GAAGjB,UAAU,CAACgB,IAAD,CAA1B;AACA,QAAIE,MAAM,GAAGD,OAAO,IAAIF,KAAK,CAACE,OAAD,CAA7B;;AACA,QAAI,CAACC,MAAL,EAAa;AACXA,YAAM,QAAO,MAACJ,iBAAD,EAA0BK,IAA1B,CAA0BC,KAA1B,CAA0BT,EAA1B,EAA0B,gBAAIK,IAAJ,CAA1B,CAAP,GAAN;;AACA,UAAIC,OAAJ,EAAa;AACXF,aAAK,CAACE,OAAD,CAAL,GAAiBC,MAAjB;AACD;AACF;;AAED,WAAOA,MAAP;AACD,GAXI;AAWJ,CAdD;;AAgBA,eAAeL,wBAAf","names":["RelativeTimeFormat","getCacheId","inputs","JSON","stringify","map","input","orderedProps","obj","Object","keys","sort","_a","k","memoizeFormatConstructor","FormatConstructor","cache","args","cacheId","format","bind","apply"],"sources":["/home/fortnyce/Desktop/work_schedule_assigner/node_modules/intl-format-cache/src/index.ts"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n// -----------------------------------------------------------------------------\n\n// TODO: Remove this once Intl.RelativeTimeFormat is no longer a draft\ninterface RelativeTimeFormat {\n  format(value: number, unit: string): string;\n  formatToParts(value: number, unit: string): { value: string }[];\n  resolvedOptions(): ResolvedRelativeTimeFormatOptions;\n}\ninterface ResolvedRelativeTimeFormatOptions\n  extends Pick<RelativeTimeFormatOptions, 'numeric' | 'style'> {\n  locale: string;\n}\ninterface RelativeTimeFormatOptions {\n  localeMatcher: 'best fit' | 'lookup';\n  numeric: 'always' | 'auto';\n  style: 'long' | 'short' | 'narrow';\n}\nlet RelativeTimeFormat: {\n  new (\n    locales?: string | string[],\n    opts?: RelativeTimeFormatOptions\n  ): RelativeTimeFormat;\n  (\n    locales?: string | string[],\n    opts?: RelativeTimeFormatOptions\n  ): RelativeTimeFormat;\n  supportedLocalesOf(\n    locales: string | string[],\n    opts?: Pick<RelativeTimeFormatOptions, 'localeMatcher'>\n  ): string[];\n};\n\n// -- Utilities ----------------------------------------------------------------\n\nfunction getCacheId(inputs: any[]) {\n  return JSON.stringify(\n    inputs.map(input =>\n      input && typeof input === 'object' ? orderedProps(input) : input\n    )\n  );\n}\n\nfunction orderedProps(obj: Record<string, any>) {\n  return Object.keys(obj)\n    .sort()\n    .map(k => ({ [k]: obj[k] }));\n}\n\ninterface MemoizeFormatConstructorFn {\n  (constructor: typeof Intl.NumberFormat): (\n    ...args: ConstructorParameters<typeof Intl.NumberFormat>\n  ) => Intl.NumberFormat;\n  (constructor: typeof Intl.DateTimeFormat): (\n    ...args: ConstructorParameters<typeof Intl.DateTimeFormat>\n  ) => Intl.DateTimeFormat;\n  (constructor: typeof RelativeTimeFormat): (\n    ...args: ConstructorParameters<typeof RelativeTimeFormat>\n  ) => RelativeTimeFormat;\n  (constructor: any): (...args: any[]) => any;\n}\n\nconst memoizeFormatConstructor: MemoizeFormatConstructorFn = (\n  FormatConstructor: any,\n  cache: Record<string, any> = {}\n) => (...args: any[]) => {\n  const cacheId = getCacheId(args);\n  let format = cacheId && cache[cacheId];\n  if (!format) {\n    format = new (FormatConstructor as any)(...args);\n    if (cacheId) {\n      cache[cacheId] = format;\n    }\n  }\n\n  return format;\n};\n\nexport default memoizeFormatConstructor;\n"]},"metadata":{},"sourceType":"module"}