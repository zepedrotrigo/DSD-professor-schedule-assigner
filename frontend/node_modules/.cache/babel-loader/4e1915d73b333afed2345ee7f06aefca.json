{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageBase = void 0;\n\nvar ImageBase =\n/** @class */\nfunction () {\n  function ImageBase() {}\n\n  ImageBase.prototype.scaleDown = function (opts) {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    var ratio = 1;\n\n    if (opts.maxDimension > 0) {\n      var maxSide = Math.max(width, height);\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide;\n    } else {\n      ratio = 1 / opts.quality;\n    }\n\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio);\n  };\n\n  ImageBase.prototype.applyFilter = function (filter) {\n    var imageData = this.getImageData();\n\n    if (typeof filter === 'function') {\n      var pixels = imageData.data;\n      var n = pixels.length / 4;\n      var offset = void 0,\n          r = void 0,\n          g = void 0,\n          b = void 0,\n          a = void 0;\n\n      for (var i = 0; i < n; i++) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3]; // Mark ignored color\n\n        if (!filter(r, g, b, a)) pixels[offset + 3] = 0;\n      }\n    }\n\n    return Promise.resolve(imageData);\n  };\n\n  return ImageBase;\n}();\n\nexports.ImageBase = ImageBase;","map":{"version":3,"mappings":";;;;;;;AAEA;AAAA;AAAA;AAAA,wBA+CC;;AApCCA,4CAAWC,IAAX,EAAwB;AACtB,QAAIC,KAAK,GAAW,KAAKC,QAAL,EAApB;AACA,QAAIC,MAAM,GAAW,KAAKC,SAAL,EAArB;AAEA,QAAIC,KAAK,GAAW,CAApB;;AAEA,QAAIL,IAAI,CAACM,YAAL,GAAoB,CAAxB,EAA2B;AACzB,UAAIC,OAAO,GAAWC,IAAI,CAACC,GAAL,CAASR,KAAT,EAAgBE,MAAhB,CAAtB;AACA,UAAII,OAAO,GAAGP,IAAI,CAACM,YAAnB,EAAiCD,KAAK,GAAGL,IAAI,CAACM,YAAL,GAAoBC,OAA5B;AAClC,KAHD,MAGO;AACLF,WAAK,GAAG,IAAIL,IAAI,CAACU,OAAjB;AACD;;AAED,QAAIL,KAAK,GAAG,CAAZ,EAAe,KAAKM,MAAL,CAAYV,KAAK,GAAGI,KAApB,EAA2BF,MAAM,GAAGE,KAApC,EAA2CA,KAA3C;AAChB,GAdD;;AAgBAN,8CAAaa,MAAb,EAA2B;AACzB,QAAIC,SAAS,GAAG,KAAKC,YAAL,EAAhB;;AAEA,QAAI,OAAOF,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAIG,MAAM,GAAGF,SAAS,CAACG,IAAvB;AACA,UAAIC,CAAC,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAAxB;AACA,UAAIC,MAAM,SAAV;AAAA,UAAYC,CAAC,SAAb;AAAA,UAAeC,CAAC,SAAhB;AAAA,UAAkBC,CAAC,SAAnB;AAAA,UAAqBC,CAAC,SAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,CAApB,EAAuBO,CAAC,EAAxB,EAA4B;AAC1BL,cAAM,GAAGK,CAAC,GAAG,CAAb;AACAJ,SAAC,GAAGL,MAAM,CAACI,MAAM,GAAG,CAAV,CAAV;AACAE,SAAC,GAAGN,MAAM,CAACI,MAAM,GAAG,CAAV,CAAV;AACAG,SAAC,GAAGP,MAAM,CAACI,MAAM,GAAG,CAAV,CAAV;AACAI,SAAC,GAAGR,MAAM,CAACI,MAAM,GAAG,CAAV,CAAV,CAL0B,CAM1B;;AACA,YAAI,CAACP,MAAM,CAACQ,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAX,EAAyBR,MAAM,CAACI,MAAM,GAAG,CAAV,CAAN,GAAqB,CAArB;AAC1B;AACF;;AAED,WAAOM,OAAO,CAACC,OAAR,CAAgBb,SAAhB,CAAP;AACD,GAnBD;;AAoBF;AAAC,CA/CD;;AAAsBc","names":["ImageBase","opts","width","getWidth","height","getHeight","ratio","maxDimension","maxSide","Math","max","quality","resize","filter","imageData","getImageData","pixels","data","n","length","offset","r","g","b","a","i","Promise","resolve","exports"],"sources":["/home/fortnyce/Desktop/work_schedule_assigner/node_modules/node-vibrant/src/image/base.ts"],"sourcesContent":["import { Filter, Image, Options, ImageData, ImageSource } from '../typing'\n\nexport abstract class ImageBase implements Image {\n  abstract load(image: ImageSource): Promise<ImageBase>\n  abstract clear(): void\n  abstract update(imageData: ImageData): void\n  abstract getWidth(): number\n  abstract getHeight(): number\n  abstract resize(targetWidth: number, targetHeight: number, ratio: number): void\n  abstract getPixelCount(): number\n  abstract getImageData(): ImageData\n  abstract remove(): void\n\n  scaleDown (opts: Options): void {\n    let width: number = this.getWidth()\n    let height: number = this.getHeight()\n\n    let ratio: number = 1\n\n    if (opts.maxDimension > 0) {\n      let maxSide: number = Math.max(width, height)\n      if (maxSide > opts.maxDimension) ratio = opts.maxDimension / maxSide\n    } else {\n      ratio = 1 / opts.quality\n    }\n\n    if (ratio < 1) this.resize(width * ratio, height * ratio, ratio)\n  }\n\n  applyFilter (filter: Filter): Promise<ImageData> {\n    let imageData = this.getImageData()\n\n    if (typeof filter === 'function') {\n      let pixels = imageData.data\n      let n = pixels.length / 4\n      let offset, r, g, b, a\n      for (let i = 0; i < n; i++) {\n        offset = i * 4\n        r = pixels[offset + 0]\n        g = pixels[offset + 1]\n        b = pixels[offset + 2]\n        a = pixels[offset + 3]\n        // Mark ignored color\n        if (!filter(r, g, b, a)) pixels[offset + 3] = 0\n      }\n    }\n\n    return Promise.resolve(imageData)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}