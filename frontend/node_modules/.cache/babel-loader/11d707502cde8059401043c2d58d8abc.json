{"ast":null,"code":"\"use strict\";\n\nexports[\"default\"] = function () {\n  \"use strict\";\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser = this,\n        peg$FAILED = {},\n        peg$startRuleFunctions = {\n      start: peg$parsestart\n    },\n        peg$startRuleFunction = peg$parsestart,\n        peg$c0 = function (elements) {\n      return {\n        type: 'messageFormatPattern',\n        elements: elements,\n        location: location()\n      };\n    },\n        peg$c1 = function (text) {\n      var string = '',\n          i,\n          j,\n          outerLen,\n          inner,\n          innerLen;\n\n      for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n        inner = text[i];\n\n        for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n          string += inner[j];\n        }\n      }\n\n      return string;\n    },\n        peg$c2 = function (messageText) {\n      return {\n        type: 'messageTextElement',\n        value: messageText,\n        location: location()\n      };\n    },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = {\n      type: \"class\",\n      value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\",\n      description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\"\n    },\n        peg$c5 = \"{\",\n        peg$c6 = {\n      type: \"literal\",\n      value: \"{\",\n      description: \"\\\"{\\\"\"\n    },\n        peg$c7 = \",\",\n        peg$c8 = {\n      type: \"literal\",\n      value: \",\",\n      description: \"\\\",\\\"\"\n    },\n        peg$c9 = \"}\",\n        peg$c10 = {\n      type: \"literal\",\n      value: \"}\",\n      description: \"\\\"}\\\"\"\n    },\n        peg$c11 = function (id, format) {\n      return {\n        type: 'argumentElement',\n        id: id,\n        format: format && format[2],\n        location: location()\n      };\n    },\n        peg$c12 = \"number\",\n        peg$c13 = {\n      type: \"literal\",\n      value: \"number\",\n      description: \"\\\"number\\\"\"\n    },\n        peg$c14 = \"date\",\n        peg$c15 = {\n      type: \"literal\",\n      value: \"date\",\n      description: \"\\\"date\\\"\"\n    },\n        peg$c16 = \"time\",\n        peg$c17 = {\n      type: \"literal\",\n      value: \"time\",\n      description: \"\\\"time\\\"\"\n    },\n        peg$c18 = function (type, style) {\n      return {\n        type: type + 'Format',\n        style: style && style[2],\n        location: location()\n      };\n    },\n        peg$c19 = \"plural\",\n        peg$c20 = {\n      type: \"literal\",\n      value: \"plural\",\n      description: \"\\\"plural\\\"\"\n    },\n        peg$c21 = function (pluralStyle) {\n      return {\n        type: pluralStyle.type,\n        ordinal: false,\n        offset: pluralStyle.offset || 0,\n        options: pluralStyle.options,\n        location: location()\n      };\n    },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = {\n      type: \"literal\",\n      value: \"selectordinal\",\n      description: \"\\\"selectordinal\\\"\"\n    },\n        peg$c24 = function (pluralStyle) {\n      return {\n        type: pluralStyle.type,\n        ordinal: true,\n        offset: pluralStyle.offset || 0,\n        options: pluralStyle.options,\n        location: location()\n      };\n    },\n        peg$c25 = \"select\",\n        peg$c26 = {\n      type: \"literal\",\n      value: \"select\",\n      description: \"\\\"select\\\"\"\n    },\n        peg$c27 = function (options) {\n      return {\n        type: 'selectFormat',\n        options: options,\n        location: location()\n      };\n    },\n        peg$c28 = \"=\",\n        peg$c29 = {\n      type: \"literal\",\n      value: \"=\",\n      description: \"\\\"=\\\"\"\n    },\n        peg$c30 = function (selector, pattern) {\n      return {\n        type: 'optionalFormatPattern',\n        selector: selector,\n        value: pattern,\n        location: location()\n      };\n    },\n        peg$c31 = \"offset:\",\n        peg$c32 = {\n      type: \"literal\",\n      value: \"offset:\",\n      description: \"\\\"offset:\\\"\"\n    },\n        peg$c33 = function (number) {\n      return number;\n    },\n        peg$c34 = function (offset, options) {\n      return {\n        type: 'pluralFormat',\n        offset: offset,\n        options: options,\n        location: location()\n      };\n    },\n        peg$c35 = {\n      type: \"other\",\n      description: \"whitespace\"\n    },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = {\n      type: \"class\",\n      value: \"[ \\\\t\\\\n\\\\r]\",\n      description: \"[ \\\\t\\\\n\\\\r]\"\n    },\n        peg$c38 = {\n      type: \"other\",\n      description: \"optionalWhitespace\"\n    },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = {\n      type: \"class\",\n      value: \"[0-9]\",\n      description: \"[0-9]\"\n    },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = {\n      type: \"class\",\n      value: \"[0-9a-f]i\",\n      description: \"[0-9a-f]i\"\n    },\n        peg$c43 = \"0\",\n        peg$c44 = {\n      type: \"literal\",\n      value: \"0\",\n      description: \"\\\"0\\\"\"\n    },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = {\n      type: \"class\",\n      value: \"[1-9]\",\n      description: \"[1-9]\"\n    },\n        peg$c47 = function (digits) {\n      return parseInt(digits, 10);\n    },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = {\n      type: \"class\",\n      value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\",\n      description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\"\n    },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = {\n      type: \"literal\",\n      value: \"\\\\\\\\\",\n      description: \"\\\"\\\\\\\\\\\\\\\\\\\"\"\n    },\n        peg$c52 = function () {\n      return '\\\\';\n    },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = {\n      type: \"literal\",\n      value: \"\\\\#\",\n      description: \"\\\"\\\\\\\\#\\\"\"\n    },\n        peg$c55 = function () {\n      return '\\\\#';\n    },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = {\n      type: \"literal\",\n      value: \"\\\\{\",\n      description: \"\\\"\\\\\\\\{\\\"\"\n    },\n        peg$c58 = function () {\n      return '\\u007B';\n    },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = {\n      type: \"literal\",\n      value: \"\\\\}\",\n      description: \"\\\"\\\\\\\\}\\\"\"\n    },\n        peg$c61 = function () {\n      return '\\u007D';\n    },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = {\n      type: \"literal\",\n      value: \"\\\\u\",\n      description: \"\\\"\\\\\\\\u\\\"\"\n    },\n        peg$c64 = function (digits) {\n      return String.fromCharCode(parseInt(digits, 16));\n    },\n        peg$c65 = function (chars) {\n      return chars.join('');\n    },\n        peg$currPos = 0,\n        peg$savedPos = 0,\n        peg$posDetailsCache = [{\n      line: 1,\n      column: 1,\n      seenCR: false\n    }],\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(null, [{\n        type: \"other\",\n        description: description\n      }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p,\n          ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n\n          if (ch === \"\\n\") {\n            if (!details.seenCR) {\n              details.line++;\n            }\n\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails = peg$computePosDetails(endPos);\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n        expected.sort(function (a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n          }\n\n          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n            return '\\\\x0' + hex(ch);\n          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n            return '\\\\x' + hex(ch);\n          }).replace(/[\\u0100-\\u0FFF]/g, function (ch) {\n            return '\\\\u0' + hex(ch);\n          }).replace(/[\\u1000-\\uFFFF]/g, function (ch) {\n            return '\\\\u' + hex(ch);\n          });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc,\n            foundDesc,\n            i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);\n    }\n\n    function peg$parsestart() {\n      var s0;\n      s0 = peg$parsemessageFormatPattern();\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n      s0 = peg$parsemessageTextElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n      s0 = peg$parsenumber();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c4);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c6);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c8);\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c10);\n                    }\n                  }\n\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n      s0 = peg$parsesimpleFormat();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c13);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c15);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c17);\n            }\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c20);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c26);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c10);\n                      }\n                    }\n\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c32);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n      peg$silentFails++;\n      s0 = [];\n\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c37);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c37);\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      peg$silentFails--;\n\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      peg$silentFails--;\n\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c38);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c40);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c42);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c44);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c46);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c49);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c51);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n\n        s0 = s1;\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c54);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n              }\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c60);\n                }\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n\n              s0 = s1;\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c63);\n                  }\n                }\n\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({\n          type: \"end\",\n          description: \"end of input\"\n        });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n}();","map":{"version":3,"mappings":"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","names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","peg$parse","input","options","arguments","length","parser","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","elements","type","peg$c1","text","string","i","j","outerLen","inner","innerLen","peg$c2","messageText","value","peg$c3","peg$c4","description","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","id","format","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","style","peg$c19","peg$c20","peg$c21","pluralStyle","ordinal","offset","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","selector","pattern","peg$c31","peg$c32","peg$c33","number","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","digits","parseInt","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","String","fromCharCode","peg$c65","chars","join","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildException","error","peg$computePosDetails","pos","details","p","ch","charAt","startPos","endPos","startPosDetails","endPosDetails","end","peg$fail","push","cleanupExpected","sort","a","b","splice","buildMessage","stringEscape","s","hex","charCodeAt","toString","toUpperCase","replace","expectedDescs","Array","expectedDesc","foundDesc","slice","s0","peg$parsemessageFormatPattern","s1","s2","peg$parsemessageFormatElement","peg$parsemessageTextElement","peg$parseargumentElement","peg$parsemessageText","s3","s4","s5","peg$parse_","peg$parsechars","peg$parsews","peg$parseargument","peg$parsenumber","test","s6","s7","s8","peg$parseelementFormat","peg$parsesimpleFormat","peg$parsepluralFormat","peg$parseselectOrdinalFormat","peg$parseselectFormat","substr","peg$parsepluralStyle","peg$parseoptionalFormatPattern","peg$parseselector","peg$parseoffset","peg$parsedigit","peg$parsehexDigit","peg$parsechar","SyntaxError","parse"],"sources":["/src/parser.js"],"sourcesContent":["export default (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(elements) {\n                return {\n                    type    : 'messageFormatPattern',\n                    elements: elements,\n                    location: location()\n                };\n            },\n        peg$c1 = function(text) {\n                var string = '',\n                    i, j, outerLen, inner, innerLen;\n\n                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n                    inner = text[i];\n\n                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n                        string += inner[j];\n                    }\n                }\n\n                return string;\n            },\n        peg$c2 = function(messageText) {\n                return {\n                    type : 'messageTextElement',\n                    value: messageText,\n                    location: location()\n                };\n            },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = { type: \"class\", value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\", description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\" },\n        peg$c5 = \"{\",\n        peg$c6 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c7 = \",\",\n        peg$c8 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c9 = \"}\",\n        peg$c10 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c11 = function(id, format) {\n                return {\n                    type  : 'argumentElement',\n                    id    : id,\n                    format: format && format[2],\n                    location: location()\n                };\n            },\n        peg$c12 = \"number\",\n        peg$c13 = { type: \"literal\", value: \"number\", description: \"\\\"number\\\"\" },\n        peg$c14 = \"date\",\n        peg$c15 = { type: \"literal\", value: \"date\", description: \"\\\"date\\\"\" },\n        peg$c16 = \"time\",\n        peg$c17 = { type: \"literal\", value: \"time\", description: \"\\\"time\\\"\" },\n        peg$c18 = function(type, style) {\n                return {\n                    type : type + 'Format',\n                    style: style && style[2],\n                    location: location()\n                };\n            },\n        peg$c19 = \"plural\",\n        peg$c20 = { type: \"literal\", value: \"plural\", description: \"\\\"plural\\\"\" },\n        peg$c21 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: false,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                };\n            },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = { type: \"literal\", value: \"selectordinal\", description: \"\\\"selectordinal\\\"\" },\n        peg$c24 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: true,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                }\n            },\n        peg$c25 = \"select\",\n        peg$c26 = { type: \"literal\", value: \"select\", description: \"\\\"select\\\"\" },\n        peg$c27 = function(options) {\n                return {\n                    type   : 'selectFormat',\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c28 = \"=\",\n        peg$c29 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c30 = function(selector, pattern) {\n                return {\n                    type    : 'optionalFormatPattern',\n                    selector: selector,\n                    value   : pattern,\n                    location: location()\n                };\n            },\n        peg$c31 = \"offset:\",\n        peg$c32 = { type: \"literal\", value: \"offset:\", description: \"\\\"offset:\\\"\" },\n        peg$c33 = function(number) {\n                return number;\n            },\n        peg$c34 = function(offset, options) {\n                return {\n                    type   : 'pluralFormat',\n                    offset : offset,\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c35 = { type: \"other\", description: \"whitespace\" },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c38 = { type: \"other\", description: \"optionalWhitespace\" },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n        peg$c43 = \"0\",\n        peg$c44 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c47 = function(digits) {\n            return parseInt(digits, 10);\n        },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = { type: \"class\", value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\", description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\" },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\n        peg$c52 = function() { return '\\\\'; },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = { type: \"literal\", value: \"\\\\#\", description: \"\\\"\\\\\\\\#\\\"\" },\n        peg$c55 = function() { return '\\\\#'; },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = { type: \"literal\", value: \"\\\\{\", description: \"\\\"\\\\\\\\{\\\"\" },\n        peg$c58 = function() { return '\\u007B'; },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = { type: \"literal\", value: \"\\\\}\", description: \"\\\"\\\\\\\\}\\\"\" },\n        peg$c61 = function() { return '\\u007D'; },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n        peg$c64 = function(digits) {\n                return String.fromCharCode(parseInt(digits, 16));\n            },\n        peg$c65 = function(chars) { return chars.join(''); },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parsemessageFormatPattern();\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n\n      s0 = peg$parsemessageTextElement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n\n      s0 = peg$parsesimpleFormat();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c37); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c42); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();"]},"metadata":{},"sourceType":"script"}