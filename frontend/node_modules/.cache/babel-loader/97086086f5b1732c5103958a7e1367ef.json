{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\"use strict\";\n\nexports[\"default\"] = Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n  this.locales = locales;\n  this.formats = formats;\n  this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n  this.pluralStack = [];\n  this.currentPlural = null;\n  this.pluralNumberFormat = null;\n  return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n  }\n\n  var elements = ast.elements,\n      pattern = [];\n  var i, len, element;\n\n  for (i = 0, len = elements.length; i < len; i += 1) {\n    element = elements[i];\n\n    switch (element.type) {\n      case 'messageTextElement':\n        pattern.push(this.compileMessageText(element));\n        break;\n\n      case 'argumentElement':\n        pattern.push(this.compileArgument(element));\n        break;\n\n      default:\n        throw new Error('Message element does not have a valid type');\n    }\n  }\n\n  return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n  // When this `element` is part of plural sub-pattern and its value contains\n  // an unescaped '#', use a `PluralOffsetString` helper to properly output\n  // the number with the correct offset in the string.\n  if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n    // Create a cache a NumberFormat instance that can be reused for any\n    // PluralOffsetString instance in this message.\n    if (!this.pluralNumberFormat) {\n      this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n    }\n\n    return new PluralOffsetString(this.currentPlural.id, this.currentPlural.format.offset, this.pluralNumberFormat, element.value);\n  } // Unescape the escaped '#'s in the message text.\n\n\n  return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n  var format = element.format;\n\n  if (!format) {\n    return new StringFormat(element.id);\n  }\n\n  var formats = this.formats,\n      locales = this.locales,\n      pluralFn = this.pluralFn,\n      options;\n\n  switch (format.type) {\n    case 'numberFormat':\n      options = formats.number[format.style];\n      return {\n        id: element.id,\n        format: new Intl.NumberFormat(locales, options).format\n      };\n\n    case 'dateFormat':\n      options = formats.date[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n\n    case 'timeFormat':\n      options = formats.time[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n\n    case 'pluralFormat':\n      options = this.compileOptions(element);\n      return new PluralFormat(element.id, format.ordinal, format.offset, options, pluralFn);\n\n    case 'selectFormat':\n      options = this.compileOptions(element);\n      return new SelectFormat(element.id, options);\n\n    default:\n      throw new Error('Message element does not have a valid format type');\n  }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n  var format = element.format,\n      options = format.options,\n      optionsHash = {}; // Save the current plural element, if any, then set it to a new value when\n  // compiling the options sub-patterns. This conforms the spec's algorithm\n  // for handling `\"#\"` syntax in message text.\n\n  this.pluralStack.push(this.currentPlural);\n  this.currentPlural = format.type === 'pluralFormat' ? element : null;\n  var i, len, option;\n\n  for (i = 0, len = options.length; i < len; i += 1) {\n    option = options[i]; // Compile the sub-pattern and save it under the options's selector.\n\n    optionsHash[option.selector] = this.compileMessage(option.value);\n  } // Pop the plural stack to put back the original current plural value.\n\n\n  this.currentPlural = this.pluralStack.pop();\n  return optionsHash;\n}; // -- Compiler Helper Classes --------------------------------------------------\n\n\nfunction StringFormat(id) {\n  this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n  if (!value && typeof value !== 'number') {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n  this.id = id;\n  this.useOrdinal = useOrdinal;\n  this.offset = offset;\n  this.options = options;\n  this.pluralFn = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  var option = options['=' + value] || options[this.pluralFn(value - this.offset, this.useOrdinal)];\n  return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n  this.id = id;\n  this.offset = offset;\n  this.numberFormat = numberFormat;\n  this.string = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n  var number = this.numberFormat.format(value - this.offset);\n  return this.string.replace(/(^|[^\\\\])#/g, '$1' + number).replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n  this.id = id;\n  this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  return options[value] || options.other;\n};","map":{"version":3,"mappings":"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","names":["Compiler","locales","formats","pluralFn","prototype","compile","ast","pluralStack","currentPlural","pluralNumberFormat","compileMessage","type","Error","elements","pattern","i","len","element","length","push","compileMessageText","compileArgument","test","value","Intl","NumberFormat","PluralOffsetString","id","format","offset","replace","StringFormat","options","number","style","date","DateTimeFormat","time","compileOptions","PluralFormat","ordinal","SelectFormat","optionsHash","option","selector","pop","String","useOrdinal","getOption","other","numberFormat","string"],"sources":["/src/compiler.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nexport default Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n    this.locales  = locales;\n    this.formats  = formats;\n    this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n    this.pluralStack        = [];\n    this.currentPlural      = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n\n    var elements = ast.elements,\n        pattern  = [];\n\n    var i, len, element;\n\n    for (i = 0, len = elements.length; i < len; i += 1) {\n        element = elements[i];\n\n        switch (element.type) {\n            case 'messageTextElement':\n                pattern.push(this.compileMessageText(element));\n                break;\n\n            case 'argumentElement':\n                pattern.push(this.compileArgument(element));\n                break;\n\n            default:\n                throw new Error('Message element does not have a valid type');\n        }\n    }\n\n    return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n        // Create a cache a NumberFormat instance that can be reused for any\n        // PluralOffsetString instance in this message.\n        if (!this.pluralNumberFormat) {\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n        }\n\n        return new PluralOffsetString(\n                this.currentPlural.id,\n                this.currentPlural.format.offset,\n                this.pluralNumberFormat,\n                element.value);\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n    var format = element.format;\n\n    if (!format) {\n        return new StringFormat(element.id);\n    }\n\n    var formats  = this.formats,\n        locales  = this.locales,\n        pluralFn = this.pluralFn,\n        options;\n\n    switch (format.type) {\n        case 'numberFormat':\n            options = formats.number[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.NumberFormat(locales, options).format\n            };\n\n        case 'dateFormat':\n            options = formats.date[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'timeFormat':\n            options = formats.time[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'pluralFormat':\n            options = this.compileOptions(element);\n            return new PluralFormat(\n                element.id, format.ordinal, format.offset, options, pluralFn\n            );\n\n        case 'selectFormat':\n            options = this.compileOptions(element);\n            return new SelectFormat(element.id, options);\n\n        default:\n            throw new Error('Message element does not have a valid format type');\n    }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n    var format      = element.format,\n        options     = format.options,\n        optionsHash = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n        option = options[i];\n\n        // Compile the sub-pattern and save it under the options's selector.\n        optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n    this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n    if (!value && typeof value !== 'number') {\n        return '';\n    }\n\n    return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n    this.id         = id;\n    this.useOrdinal = useOrdinal;\n    this.offset     = offset;\n    this.options    = options;\n    this.pluralFn   = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n    var options = this.options;\n\n    var option = options['=' + value] ||\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\n\n    return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n    this.id           = id;\n    this.offset       = offset;\n    this.numberFormat = numberFormat;\n    this.string       = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n            .replace(/(^|[^\\\\])#/g, '$1' + number)\n            .replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n    this.id      = id;\n    this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n    var options = this.options;\n    return options[value] || options.other;\n};\n"]},"metadata":{},"sourceType":"script"}