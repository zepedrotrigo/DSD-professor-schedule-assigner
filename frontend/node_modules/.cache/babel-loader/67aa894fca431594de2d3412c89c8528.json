{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../util\");\n\nvar VBox =\n/** @class */\nfunction () {\n  function VBox(r1, r2, g1, g2, b1, b2, hist) {\n    this._volume = -1;\n    this._count = -1;\n    this.dimension = {\n      r1: r1,\n      r2: r2,\n      g1: g1,\n      g2: g2,\n      b1: b1,\n      b2: b2\n    };\n    this.hist = hist;\n  }\n\n  VBox.build = function (pixels, shouldIgnore) {\n    var hn = 1 << 3 * util_1.SIGBITS;\n    var hist = new Uint32Array(hn);\n    var rmax;\n    var rmin;\n    var gmax;\n    var gmin;\n    var bmax;\n    var bmin;\n    var r;\n    var g;\n    var b;\n    var a;\n    rmax = gmax = bmax = 0;\n    rmin = gmin = bmin = Number.MAX_VALUE;\n    var n = pixels.length / 4;\n    var i = 0;\n\n    while (i < n) {\n      var offset = i * 4;\n      i++;\n      r = pixels[offset + 0];\n      g = pixels[offset + 1];\n      b = pixels[offset + 2];\n      a = pixels[offset + 3]; // Ignored pixels' alpha is marked as 0 in filtering stage\n\n      if (a === 0) continue;\n      r = r >> util_1.RSHIFT;\n      g = g >> util_1.RSHIFT;\n      b = b >> util_1.RSHIFT;\n      var index = util_1.getColorIndex(r, g, b);\n      hist[index] += 1;\n      if (r > rmax) rmax = r;\n      if (r < rmin) rmin = r;\n      if (g > gmax) gmax = g;\n      if (g < gmin) gmin = g;\n      if (b > bmax) bmax = b;\n      if (b < bmin) bmin = b;\n    }\n\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist);\n  };\n\n  VBox.prototype.invalidate = function () {\n    this._volume = this._count = -1;\n    this._avg = null;\n  };\n\n  VBox.prototype.volume = function () {\n    if (this._volume < 0) {\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n    }\n\n    return this._volume;\n  };\n\n  VBox.prototype.count = function () {\n    if (this._count < 0) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var c = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            c += hist[index];\n          }\n        }\n      }\n\n      this._count = c;\n    }\n\n    return this._count;\n  };\n\n  VBox.prototype.clone = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    return new VBox(r1, r2, g1, g2, b1, b2, hist);\n  };\n\n  VBox.prototype.avg = function () {\n    if (!this._avg) {\n      var hist = this.hist;\n      var _a = this.dimension,\n          r1 = _a.r1,\n          r2 = _a.r2,\n          g1 = _a.g1,\n          g2 = _a.g2,\n          b1 = _a.b1,\n          b2 = _a.b2;\n      var ntot = 0;\n      var mult = 1 << 8 - util_1.SIGBITS;\n      var rsum = void 0;\n      var gsum = void 0;\n      var bsum = void 0;\n      rsum = gsum = bsum = 0;\n\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            var h = hist[index];\n            ntot += h;\n            rsum += h * (r + 0.5) * mult;\n            gsum += h * (g + 0.5) * mult;\n            bsum += h * (b + 0.5) * mult;\n          }\n        }\n      }\n\n      if (ntot) {\n        this._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n      } else {\n        this._avg = [~~(mult * (r1 + r2 + 1) / 2), ~~(mult * (g1 + g2 + 1) / 2), ~~(mult * (b1 + b2 + 1) / 2)];\n      }\n    }\n\n    return this._avg;\n  };\n\n  VBox.prototype.contains = function (rgb) {\n    var r = rgb[0],\n        g = rgb[1],\n        b = rgb[2];\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    r >>= util_1.RSHIFT;\n    g >>= util_1.RSHIFT;\n    b >>= util_1.RSHIFT;\n    return r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2;\n  };\n\n  VBox.prototype.split = function () {\n    var hist = this.hist;\n    var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n    var count = this.count();\n    if (!count) return [];\n    if (count === 1) return [this.clone()];\n    var rw = r2 - r1 + 1;\n    var gw = g2 - g1 + 1;\n    var bw = b2 - b1 + 1;\n    var maxw = Math.max(rw, gw, bw);\n    var accSum = null;\n    var sum;\n    var total;\n    sum = total = 0;\n    var maxd = null;\n\n    if (maxw === rw) {\n      maxd = 'r';\n      accSum = new Uint32Array(r2 + 1);\n\n      for (var r = r1; r <= r2; r++) {\n        sum = 0;\n\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[r] = total;\n      }\n    } else if (maxw === gw) {\n      maxd = 'g';\n      accSum = new Uint32Array(g2 + 1);\n\n      for (var g = g1; g <= g2; g++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[g] = total;\n      }\n    } else {\n      maxd = 'b';\n      accSum = new Uint32Array(b2 + 1);\n\n      for (var b = b1; b <= b2; b++) {\n        sum = 0;\n\n        for (var r = r1; r <= r2; r++) {\n          for (var g = g1; g <= g2; g++) {\n            var index = util_1.getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n\n        total += sum;\n        accSum[b] = total;\n      }\n    }\n\n    var splitPoint = -1;\n    var reverseSum = new Uint32Array(accSum.length);\n\n    for (var i = 0; i < accSum.length; i++) {\n      var d = accSum[i];\n      if (splitPoint < 0 && d > total / 2) splitPoint = i;\n      reverseSum[i] = total - d;\n    }\n\n    var vbox = this;\n\n    function doCut(d) {\n      var dim1 = d + '1';\n      var dim2 = d + '2';\n      var d1 = vbox.dimension[dim1];\n      var d2 = vbox.dimension[dim2];\n      var vbox1 = vbox.clone();\n      var vbox2 = vbox.clone();\n      var left = splitPoint - d1;\n      var right = d2 - splitPoint;\n\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n        d2 = Math.max(0, d2);\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n        d2 = Math.min(vbox.dimension[dim2], d2);\n      }\n\n      while (!accSum[d2]) d2++;\n\n      var c2 = reverseSum[d2];\n\n      while (!c2 && accSum[d2 - 1]) c2 = reverseSum[--d2];\n\n      vbox1.dimension[dim2] = d2;\n      vbox2.dimension[dim1] = d2 + 1;\n      return [vbox1, vbox2];\n    }\n\n    return doCut(maxd);\n  };\n\n  return VBox;\n}();\n\nexports.default = VBox;","map":{"version":3,"mappings":";;;;;;AAEA;;AAYA;AAAA;AAAA;AAsDE,gBACEA,EADF,EACcC,EADd,EAEEC,EAFF,EAEcC,EAFd,EAGEC,EAHF,EAGcC,EAHd,EAIEC,IAJF,EAImB;AARX,mBAAU,CAAC,CAAX;AAEA,kBAAS,CAAC,CAAV;AAQN,SAAKC,SAAL,GAAiB;AAAEP,QAAE,IAAJ;AAAMC,QAAE,IAAR;AAAUC,QAAE,IAAZ;AAAcC,QAAE,IAAhB;AAAkBC,QAAE,IAApB;AAAsBC,QAAE;AAAxB,KAAjB;AAEA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AA9DME,eAAP,UAAcC,MAAd,EAA8BC,YAA9B,EAAmD;AACjD,QAAIC,EAAE,GAAG,KAAM,IAAIC,cAAnB;AACA,QAAIN,IAAI,GAAG,IAAIO,WAAJ,CAAgBF,EAAhB,CAAX;AACA,QAAIG,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,CAAJ;AACAT,QAAI,GAAGE,IAAI,GAAGE,IAAI,GAAG,CAArB;AACAH,QAAI,GAAGE,IAAI,GAAGE,IAAI,GAAGK,MAAM,CAACC,SAA5B;AACA,QAAIC,CAAC,GAAGjB,MAAM,CAACkB,MAAP,GAAgB,CAAxB;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,WAAOA,CAAC,GAAGF,CAAX,EAAc;AACZ,UAAIG,MAAM,GAAGD,CAAC,GAAG,CAAjB;AACAA,OAAC;AACDR,OAAC,GAAGX,MAAM,CAACoB,MAAM,GAAG,CAAV,CAAV;AACAR,OAAC,GAAGZ,MAAM,CAACoB,MAAM,GAAG,CAAV,CAAV;AACAP,OAAC,GAAGb,MAAM,CAACoB,MAAM,GAAG,CAAV,CAAV;AACAN,OAAC,GAAGd,MAAM,CAACoB,MAAM,GAAG,CAAV,CAAV,CANY,CAQZ;;AACA,UAAIN,CAAC,KAAK,CAAV,EAAa;AAEbH,OAAC,GAAGA,CAAC,IAAIR,aAAT;AACAS,OAAC,GAAGA,CAAC,IAAIT,aAAT;AACAU,OAAC,GAAGA,CAAC,IAAIV,aAAT;AAEA,UAAIkB,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACAhB,UAAI,CAACwB,KAAD,CAAJ,IAAe,CAAf;AAEA,UAAIV,CAAC,GAAGN,IAAR,EAAcA,IAAI,GAAGM,CAAP;AACd,UAAIA,CAAC,GAAGL,IAAR,EAAcA,IAAI,GAAGK,CAAP;AACd,UAAIC,CAAC,GAAGL,IAAR,EAAcA,IAAI,GAAGK,CAAP;AACd,UAAIA,CAAC,GAAGJ,IAAR,EAAcA,IAAI,GAAGI,CAAP;AACd,UAAIC,CAAC,GAAGJ,IAAR,EAAcA,IAAI,GAAGI,CAAP;AACd,UAAIA,CAAC,GAAGH,IAAR,EAAcA,IAAI,GAAGG,CAAP;AACf;;AACD,WAAO,IAAId,IAAJ,CAASO,IAAT,EAAeD,IAAf,EAAqBG,IAArB,EAA2BD,IAA3B,EAAiCG,IAAjC,EAAuCD,IAAvC,EAA6CZ,IAA7C,CAAP;AACD,GA5CM;;AAgEPE;AACE,SAAKuB,OAAL,GAAe,KAAKC,MAAL,GAAc,CAAC,CAA9B;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD,GAHD;;AAKAzB;AACE,QAAI,KAAKuB,OAAL,GAAe,CAAnB,EAAsB;AAChB,eAA6B,KAAKxB,SAAlC;AAAA,UAAEP,EAAE,QAAJ;AAAA,UAAMC,EAAE,QAAR;AAAA,UAAUC,EAAE,QAAZ;AAAA,UAAcC,EAAE,QAAhB;AAAA,UAAkBC,EAAE,QAApB;AAAA,UAAsBC,EAAE,QAAxB;AACJ,WAAK0B,OAAL,GAAe,CAAC9B,EAAE,GAAGD,EAAL,GAAU,CAAX,KAAiBG,EAAE,GAAGD,EAAL,GAAU,CAA3B,KAAiCG,EAAE,GAAGD,EAAL,GAAU,CAA3C,CAAf;AACD;;AACD,WAAO,KAAK2B,OAAZ;AACD,GAND;;AAQAvB;AACE,QAAI,KAAKwB,MAAL,GAAc,CAAlB,EAAqB;AACb,cAAI,GAAK,KAAI1B,IAAb;AACF,eAA6B,KAAKC,SAAlC;AAAA,UAAEP,EAAE,QAAJ;AAAA,UAAMC,EAAE,QAAR;AAAA,UAAUC,EAAE,QAAZ;AAAA,UAAcC,EAAE,QAAhB;AAAA,UAAkBC,EAAE,QAApB;AAAA,UAAsBC,EAAE,QAAxB;AACJ,UAAI6B,CAAC,GAAG,CAAR;;AAEA,WAAK,IAAId,CAAC,GAAGpB,EAAb,EAAiBoB,CAAC,IAAInB,EAAtB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC7B,aAAK,IAAIC,CAAC,GAAGnB,EAAb,EAAiBmB,CAAC,IAAIlB,EAAtB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC7B,eAAK,IAAIC,CAAC,GAAGlB,EAAb,EAAiBkB,CAAC,IAAIjB,EAAtB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC7B,gBAAIQ,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACAY,aAAC,IAAI5B,IAAI,CAACwB,KAAD,CAAT;AACD;AACF;AACF;;AACD,WAAKE,MAAL,GAAcE,CAAd;AACD;;AACD,WAAO,KAAKF,MAAZ;AACD,GAjBD;;AAmBAxB;AACQ,YAAI,GAAK,KAAIF,IAAb;AACF,aAA6B,KAAKC,SAAlC;AAAA,QAAEP,EAAE,QAAJ;AAAA,QAAMC,EAAE,QAAR;AAAA,QAAUC,EAAE,QAAZ;AAAA,QAAcC,EAAE,QAAhB;AAAA,QAAkBC,EAAE,QAApB;AAAA,QAAsBC,EAAE,QAAxB;AACJ,WAAO,IAAIG,IAAJ,CAASR,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,IAAjC,CAAP;AACD,GAJD;;AAMAE;AACE,QAAI,CAAC,KAAKyB,IAAV,EAAgB;AACR,cAAI,GAAK,KAAI3B,IAAb;AACF,eAA6B,KAAKC,SAAlC;AAAA,UAAEP,EAAE,QAAJ;AAAA,UAAMC,EAAE,QAAR;AAAA,UAAUC,EAAE,QAAZ;AAAA,UAAcC,EAAE,QAAhB;AAAA,UAAkBC,EAAE,QAApB;AAAA,UAAsBC,EAAE,QAAxB;AACJ,UAAI8B,IAAI,GAAG,CAAX;AACA,UAAIC,IAAI,GAAG,KAAM,IAAIxB,cAArB;AACA,UAAIyB,IAAI,SAAR;AACA,UAAIC,IAAI,SAAR;AACA,UAAIC,IAAI,SAAR;AACAF,UAAI,GAAGC,IAAI,GAAGC,IAAI,GAAG,CAArB;;AAEA,WAAK,IAAInB,CAAC,GAAGpB,EAAb,EAAiBoB,CAAC,IAAInB,EAAtB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC7B,aAAK,IAAIC,CAAC,GAAGnB,EAAb,EAAiBmB,CAAC,IAAIlB,EAAtB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC7B,eAAK,IAAIC,CAAC,GAAGlB,EAAb,EAAiBkB,CAAC,IAAIjB,EAAtB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC7B,gBAAIQ,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACA,gBAAIkB,CAAC,GAAGlC,IAAI,CAACwB,KAAD,CAAZ;AACAK,gBAAI,IAAIK,CAAR;AACAH,gBAAI,IAAKG,CAAC,IAAIpB,CAAC,GAAG,GAAR,CAAD,GAAgBgB,IAAzB;AACAE,gBAAI,IAAKE,CAAC,IAAInB,CAAC,GAAG,GAAR,CAAD,GAAgBe,IAAzB;AACAG,gBAAI,IAAKC,CAAC,IAAIlB,CAAC,GAAG,GAAR,CAAD,GAAgBc,IAAzB;AACD;AACF;AACF;;AACD,UAAID,IAAJ,EAAU;AACR,aAAKF,IAAL,GAAY,CACV,CAAC,EAAEI,IAAI,GAAGF,IAAT,CADS,EAEV,CAAC,EAAEG,IAAI,GAAGH,IAAT,CAFS,EAGV,CAAC,EAAEI,IAAI,GAAGJ,IAAT,CAHS,CAAZ;AAKD,OAND,MAMO;AACL,aAAKF,IAAL,GAAY,CACV,CAAC,EAAEG,IAAI,IAAIpC,EAAE,GAAGC,EAAL,GAAU,CAAd,CAAJ,GAAuB,CAAzB,CADS,EAEV,CAAC,EAAEmC,IAAI,IAAIlC,EAAE,GAAGC,EAAL,GAAU,CAAd,CAAJ,GAAuB,CAAzB,CAFS,EAGV,CAAC,EAAEiC,IAAI,IAAIhC,EAAE,GAAGC,EAAL,GAAU,CAAd,CAAJ,GAAuB,CAAzB,CAHS,CAAZ;AAKD;AACF;;AACD,WAAO,KAAK4B,IAAZ;AACD,GAtCD;;AAwCAzB,sCAAUiC,GAAV,EAAmB;AACZ,SAAC,GAAUA,GAAG,GAAd;AAAA,QAAGpB,CAAC,GAAOoB,GAAG,GAAd;AAAA,QAAMnB,CAAC,GAAImB,GAAG,GAAd;AACD,aAA6B,KAAKlC,SAAlC;AAAA,QAAEP,EAAE,QAAJ;AAAA,QAAMC,EAAE,QAAR;AAAA,QAAUC,EAAE,QAAZ;AAAA,QAAcC,EAAE,QAAhB;AAAA,QAAkBC,EAAE,QAApB;AAAA,QAAsBC,EAAE,QAAxB;AACJe,KAAC,KAAKR,aAAN;AACAS,KAAC,KAAKT,aAAN;AACAU,KAAC,KAAKV,aAAN;AAEA,WAAOQ,CAAC,IAAIpB,EAAL,IAAWoB,CAAC,IAAInB,EAAhB,IACLoB,CAAC,IAAInB,EADA,IACMmB,CAAC,IAAIlB,EADX,IAELmB,CAAC,IAAIlB,EAFA,IAEMkB,CAAC,IAAIjB,EAFlB;AAGD,GAVD;;AAYAG;AACQ,YAAI,GAAK,KAAIF,IAAb;AACF,aAA6B,KAAKC,SAAlC;AAAA,QAAEP,EAAE,QAAJ;AAAA,QAAMC,EAAE,QAAR;AAAA,QAAUC,EAAE,QAAZ;AAAA,QAAcC,EAAE,QAAhB;AAAA,QAAkBC,EAAE,QAApB;AAAA,QAAsBC,EAAE,QAAxB;AACJ,QAAIqC,KAAK,GAAG,KAAKA,KAAL,EAAZ;AACA,QAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AACZ,QAAIA,KAAK,KAAK,CAAd,EAAiB,OAAO,CAAC,KAAKC,KAAL,EAAD,CAAP;AACjB,QAAIC,EAAE,GAAG3C,EAAE,GAAGD,EAAL,GAAU,CAAnB;AACA,QAAI6C,EAAE,GAAG1C,EAAE,GAAGD,EAAL,GAAU,CAAnB;AACA,QAAI4C,EAAE,GAAGzC,EAAE,GAAGD,EAAL,GAAU,CAAnB;AAEA,QAAI2C,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASL,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,CAAX;AACA,QAAII,MAAM,GAAuB,IAAjC;AACA,QAAIC,GAAJ;AACA,QAAIC,KAAJ;AACAD,OAAG,GAAGC,KAAK,GAAG,CAAd;AAEA,QAAIC,IAAI,GAA2B,IAAnC;;AAEA,QAAIN,IAAI,KAAKH,EAAb,EAAiB;AACfS,UAAI,GAAG,GAAP;AACAH,YAAM,GAAG,IAAIrC,WAAJ,CAAgBZ,EAAE,GAAG,CAArB,CAAT;;AACA,WAAK,IAAImB,CAAC,GAAGpB,EAAb,EAAiBoB,CAAC,IAAInB,EAAtB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC7B+B,WAAG,GAAG,CAAN;;AACA,aAAK,IAAI9B,CAAC,GAAGnB,EAAb,EAAiBmB,CAAC,IAAIlB,EAAtB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC7B,eAAK,IAAIC,CAAC,GAAGlB,EAAb,EAAiBkB,CAAC,IAAIjB,EAAtB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC7B,gBAAIQ,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACA6B,eAAG,IAAI7C,IAAI,CAACwB,KAAD,CAAX;AACD;AACF;;AACDsB,aAAK,IAAID,GAAT;AACAD,cAAM,CAAC9B,CAAD,CAAN,GAAYgC,KAAZ;AACD;AACF,KAdD,MAcO,IAAIL,IAAI,KAAKF,EAAb,EAAiB;AACtBQ,UAAI,GAAG,GAAP;AACAH,YAAM,GAAG,IAAIrC,WAAJ,CAAgBV,EAAE,GAAG,CAArB,CAAT;;AACA,WAAK,IAAIkB,CAAC,GAAGnB,EAAb,EAAiBmB,CAAC,IAAIlB,EAAtB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC7B8B,WAAG,GAAG,CAAN;;AACA,aAAK,IAAI/B,CAAC,GAAGpB,EAAb,EAAiBoB,CAAC,IAAInB,EAAtB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC7B,eAAK,IAAIE,CAAC,GAAGlB,EAAb,EAAiBkB,CAAC,IAAIjB,EAAtB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC7B,gBAAIQ,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACA6B,eAAG,IAAI7C,IAAI,CAACwB,KAAD,CAAX;AACD;AACF;;AACDsB,aAAK,IAAID,GAAT;AACAD,cAAM,CAAC7B,CAAD,CAAN,GAAY+B,KAAZ;AACD;AACF,KAdM,MAcA;AACLC,UAAI,GAAG,GAAP;AACAH,YAAM,GAAG,IAAIrC,WAAJ,CAAgBR,EAAE,GAAG,CAArB,CAAT;;AACA,WAAK,IAAIiB,CAAC,GAAGlB,EAAb,EAAiBkB,CAAC,IAAIjB,EAAtB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC7B6B,WAAG,GAAG,CAAN;;AACA,aAAK,IAAI/B,CAAC,GAAGpB,EAAb,EAAiBoB,CAAC,IAAInB,EAAtB,EAA0BmB,CAAC,EAA3B,EAA+B;AAC7B,eAAK,IAAIC,CAAC,GAAGnB,EAAb,EAAiBmB,CAAC,IAAIlB,EAAtB,EAA0BkB,CAAC,EAA3B,EAA+B;AAC7B,gBAAIS,KAAK,GAAGlB,qBAAcQ,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,CAAZ;AACA6B,eAAG,IAAI7C,IAAI,CAACwB,KAAD,CAAX;AACD;AACF;;AACDsB,aAAK,IAAID,GAAT;AACAD,cAAM,CAAC5B,CAAD,CAAN,GAAY8B,KAAZ;AACD;AACF;;AAED,QAAIE,UAAU,GAAG,CAAC,CAAlB;AACA,QAAIC,UAAU,GAAG,IAAI1C,WAAJ,CAAgBqC,MAAM,CAACvB,MAAvB,CAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,MAAM,CAACvB,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,UAAI4B,CAAC,GAAGN,MAAM,CAACtB,CAAD,CAAd;AACA,UAAI0B,UAAU,GAAG,CAAb,IAAkBE,CAAC,GAAGJ,KAAK,GAAG,CAAlC,EAAqCE,UAAU,GAAG1B,CAAb;AACrC2B,gBAAU,CAAC3B,CAAD,CAAV,GAAgBwB,KAAK,GAAGI,CAAxB;AACD;;AAED,QAAIC,IAAI,GAAG,IAAX;;AAEA,aAASC,KAAT,CAAgBF,CAAhB,EAAyB;AACvB,UAAIG,IAAI,GAAGH,CAAC,GAAG,GAAf;AACA,UAAII,IAAI,GAAGJ,CAAC,GAAG,GAAf;AACA,UAAIK,EAAE,GAAGJ,IAAI,CAAClD,SAAL,CAAeoD,IAAf,CAAT;AACA,UAAIG,EAAE,GAAGL,IAAI,CAAClD,SAAL,CAAeqD,IAAf,CAAT;AACA,UAAIG,KAAK,GAAGN,IAAI,CAACd,KAAL,EAAZ;AACA,UAAIqB,KAAK,GAAGP,IAAI,CAACd,KAAL,EAAZ;AACA,UAAIsB,IAAI,GAAGX,UAAU,GAAGO,EAAxB;AACA,UAAIK,KAAK,GAAGJ,EAAE,GAAGR,UAAjB;;AACA,UAAIW,IAAI,IAAIC,KAAZ,EAAmB;AACjBJ,UAAE,GAAGd,IAAI,CAACmB,GAAL,CAASL,EAAE,GAAG,CAAd,EAAiB,CAAC,EAAER,UAAU,GAAGY,KAAK,GAAG,CAAvB,CAAlB,CAAL;AACAJ,UAAE,GAAGd,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYa,EAAZ,CAAL;AACD,OAHD,MAGO;AACLA,UAAE,GAAGd,IAAI,CAACC,GAAL,CAASY,EAAT,EAAa,CAAC,EAAEP,UAAU,GAAG,CAAb,GAAiBW,IAAI,GAAG,CAA1B,CAAd,CAAL;AACAH,UAAE,GAAGd,IAAI,CAACmB,GAAL,CAASV,IAAI,CAAClD,SAAL,CAAeqD,IAAf,CAAT,EAA+BE,EAA/B,CAAL;AACD;;AAED,aAAO,CAACZ,MAAO,CAACY,EAAD,CAAf,EAAqBA,EAAE;;AAEvB,UAAIM,EAAE,GAAGb,UAAU,CAACO,EAAD,CAAnB;;AACA,aAAO,CAACM,EAAD,IAAOlB,MAAO,CAACY,EAAE,GAAG,CAAN,CAArB,EAA+BM,EAAE,GAAGb,UAAU,CAAC,EAAEO,EAAH,CAAf;;AAE/BC,WAAK,CAACxD,SAAN,CAAgBqD,IAAhB,IAAwBE,EAAxB;AACAE,WAAK,CAACzD,SAAN,CAAgBoD,IAAhB,IAAwBG,EAAE,GAAG,CAA7B;AAEA,aAAO,CAACC,KAAD,EAAQC,KAAR,CAAP;AACD;;AAED,WAAON,KAAK,CAACL,IAAD,CAAZ;AACD,GArGD;;AAsGF;AAAC,CAjQD","names":["r1","r2","g1","g2","b1","b2","hist","dimension","VBox","pixels","shouldIgnore","hn","util_1","Uint32Array","rmax","rmin","gmax","gmin","bmax","bmin","r","g","b","a","Number","MAX_VALUE","n","length","i","offset","index","_volume","_count","_avg","c","ntot","mult","rsum","gsum","bsum","h","rgb","count","clone","rw","gw","bw","maxw","Math","max","accSum","sum","total","maxd","splitPoint","reverseSum","d","vbox","doCut","dim1","dim2","d1","d2","vbox1","vbox2","left","right","min","c2"],"sources":["/home/fortnyce/Desktop/work_schedule_assigner/node_modules/node-vibrant/src/quantizer/vbox.ts"],"sourcesContent":["import { Vec3 } from '../color'\nimport { Pixels, Filter } from '../typing'\nimport { getColorIndex, SIGBITS, RSHIFT } from '../util'\n\nexport interface Dimension {\n  r1: number\n  r2: number\n  g1: number\n  g2: number\n  b1: number\n  b2: number\n  [d: string]: number\n}\n\nexport default class VBox {\n  static build (pixels: Pixels, shouldIgnore?: Filter): VBox {\n    let hn = 1 << (3 * SIGBITS)\n    let hist = new Uint32Array(hn)\n    let rmax: number\n    let rmin: number\n    let gmax: number\n    let gmin: number\n    let bmax: number\n    let bmin: number\n    let r: number\n    let g: number\n    let b: number\n    let a: number\n    rmax = gmax = bmax = 0\n    rmin = gmin = bmin = Number.MAX_VALUE\n    let n = pixels.length / 4\n    let i = 0\n\n    while (i < n) {\n      let offset = i * 4\n      i++\n      r = pixels[offset + 0]\n      g = pixels[offset + 1]\n      b = pixels[offset + 2]\n      a = pixels[offset + 3]\n\n      // Ignored pixels' alpha is marked as 0 in filtering stage\n      if (a === 0) continue\n\n      r = r >> RSHIFT\n      g = g >> RSHIFT\n      b = b >> RSHIFT\n\n      let index = getColorIndex(r, g, b)\n      hist[index] += 1\n\n      if (r > rmax) rmax = r\n      if (r < rmin) rmin = r\n      if (g > gmax) gmax = g\n      if (g < gmin) gmin = g\n      if (b > bmax) bmax = b\n      if (b < bmin) bmin = b\n    }\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, hist)\n  }\n\n  dimension: Dimension\n  hist: Uint32Array\n\n  private _volume = -1\n  private _avg: Vec3 | null\n  private _count = -1\n\n  constructor (\n    r1: number, r2: number,\n    g1: number, g2: number,\n    b1: number, b2: number,\n    hist: Uint32Array\n  ) {\n    this.dimension = { r1, r2, g1, g2, b1, b2 }\n\n    this.hist = hist\n  }\n\n  invalidate (): void {\n    this._volume = this._count = -1\n    this._avg = null\n  }\n\n  volume (): number {\n    if (this._volume < 0) {\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1)\n    }\n    return this._volume\n  }\n\n  count (): number {\n    if (this._count < 0) {\n      let { hist } = this\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let c = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            c += hist[index]\n          }\n        }\n      }\n      this._count = c\n    }\n    return this._count\n  }\n\n  clone (): VBox {\n    let { hist } = this\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    return new VBox(r1, r2, g1, g2, b1, b2, hist)\n  }\n\n  avg (): Vec3 {\n    if (!this._avg) {\n      let { hist } = this\n      let { r1, r2, g1, g2, b1, b2 } = this.dimension\n      let ntot = 0\n      let mult = 1 << (8 - SIGBITS)\n      let rsum: number\n      let gsum: number\n      let bsum: number\n      rsum = gsum = bsum = 0\n\n      for (let r = r1; r <= r2; r++) {\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b)\n            var h = hist[index]\n            ntot += h\n            rsum += (h * (r + 0.5) * mult)\n            gsum += (h * (g + 0.5) * mult)\n            bsum += (h * (b + 0.5) * mult)\n          }\n        }\n      }\n      if (ntot) {\n        this._avg = [\n          ~~(rsum / ntot),\n          ~~(gsum / ntot),\n          ~~(bsum / ntot)\n        ]\n      } else {\n        this._avg = [\n          ~~(mult * (r1 + r2 + 1) / 2),\n          ~~(mult * (g1 + g2 + 1) / 2),\n          ~~(mult * (b1 + b2 + 1) / 2)\n        ]\n      }\n    }\n    return this._avg\n  }\n\n  contains (rgb: Vec3): boolean {\n    let [r, g, b] = rgb\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    r >>= RSHIFT\n    g >>= RSHIFT\n    b >>= RSHIFT\n\n    return r >= r1 && r <= r2 &&\n      g >= g1 && g <= g2 &&\n      b >= b1 && b <= b2\n  }\n\n  split (): VBox[] {\n    let { hist } = this\n    let { r1, r2, g1, g2, b1, b2 } = this.dimension\n    let count = this.count()\n    if (!count) return []\n    if (count === 1) return [this.clone()]\n    let rw = r2 - r1 + 1\n    let gw = g2 - g1 + 1\n    let bw = b2 - b1 + 1\n\n    let maxw = Math.max(rw, gw, bw)\n    let accSum: Uint32Array | null = null\n    let sum: number\n    let total: number\n    sum = total = 0\n\n    let maxd: 'r' | 'g' | 'b' | null = null\n\n    if (maxw === rw) {\n      maxd = 'r'\n      accSum = new Uint32Array(r2 + 1)\n      for (let r = r1; r <= r2; r++) {\n        sum = 0\n        for (let g = g1; g <= g2; g++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[r] = total\n      }\n    } else if (maxw === gw) {\n      maxd = 'g'\n      accSum = new Uint32Array(g2 + 1)\n      for (let g = g1; g <= g2; g++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let b = b1; b <= b2; b++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[g] = total\n      }\n    } else {\n      maxd = 'b'\n      accSum = new Uint32Array(b2 + 1)\n      for (let b = b1; b <= b2; b++) {\n        sum = 0\n        for (let r = r1; r <= r2; r++) {\n          for (let g = g1; g <= g2; g++) {\n            let index = getColorIndex(r, g, b)\n            sum += hist[index]\n          }\n        }\n        total += sum\n        accSum[b] = total\n      }\n    }\n\n    let splitPoint = -1\n    let reverseSum = new Uint32Array(accSum.length)\n    for (let i = 0; i < accSum.length; i++) {\n      let d = accSum[i]\n      if (splitPoint < 0 && d > total / 2) splitPoint = i\n      reverseSum[i] = total - d\n    }\n\n    let vbox = this\n\n    function doCut (d: string): VBox[] {\n      let dim1 = d + '1'\n      let dim2 = d + '2'\n      let d1 = vbox.dimension[dim1]\n      let d2 = vbox.dimension[dim2]\n      let vbox1 = vbox.clone()\n      let vbox2 = vbox.clone()\n      let left = splitPoint - d1\n      let right = d2 - splitPoint\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2))\n        d2 = Math.max(0, d2)\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2))\n        d2 = Math.min(vbox.dimension[dim2], d2)\n      }\n\n      while (!accSum![d2]) d2++\n\n      let c2 = reverseSum[d2]\n      while (!c2 && accSum![d2 - 1]) c2 = reverseSum[--d2]\n\n      vbox1.dimension[dim2] = d2\n      vbox2.dimension[dim1] = d2 + 1\n\n      return [vbox1, vbox2]\n    }\n\n    return doCut(maxd)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}