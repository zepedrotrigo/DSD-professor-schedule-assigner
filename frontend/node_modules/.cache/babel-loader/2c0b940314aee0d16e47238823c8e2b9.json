{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = require(\"../color\");\n\nvar util_1 = require(\"../util\");\n\nvar defaults = require(\"lodash/defaults\");\n\nvar DefaultOpts = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n};\n\nfunction _findMaxPopulation(swatches) {\n  var p = 0;\n  swatches.forEach(function (s) {\n    p = Math.max(p, s.getPopulation());\n  });\n  return p;\n}\n\nfunction _isAlreadySelected(palette, s) {\n  return palette.Vibrant === s || palette.DarkVibrant === s || palette.LightVibrant === s || palette.Muted === s || palette.DarkMuted === s || palette.LightMuted === s;\n}\n\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n  function weightedMean() {\n    var values = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      values[_i] = arguments[_i];\n    }\n\n    var sum = 0;\n    var weightSum = 0;\n\n    for (var i = 0; i < values.length; i += 2) {\n      var value = values[i];\n      var weight = values[i + 1];\n      sum += value * weight;\n      weightSum += weight;\n    }\n\n    return sum / weightSum;\n  }\n\n  function invertDiff(value, targetValue) {\n    return 1 - Math.abs(value - targetValue);\n  }\n\n  return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\n\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n  var max = null;\n  var maxValue = 0;\n  swatches.forEach(function (swatch) {\n    var _a = swatch.getHsl(),\n        s = _a[1],\n        l = _a[2];\n\n    if (s >= minSaturation && s <= maxSaturation && l >= minLuma && l <= maxLuma && !_isAlreadySelected(palette, swatch)) {\n      var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts);\n\n      if (max === null || value > maxValue) {\n        max = swatch;\n        maxValue = value;\n      }\n    }\n  });\n  return max;\n}\n\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n  var palette = {}; // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts); // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts); // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts); // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  return palette;\n}\n\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n  if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n    if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n      var _a = palette.DarkMuted.getHsl(),\n          h = _a[0],\n          s = _a[1],\n          l = _a[2];\n\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n\n    if (palette.LightVibrant === null && palette.LightMuted !== null) {\n      var _b = palette.LightMuted.getHsl(),\n          h = _b[0],\n          s = _b[1],\n          l = _b[2];\n\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n    }\n  }\n\n  if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n    var _c = palette.DarkVibrant.getHsl(),\n        h = _c[0],\n        s = _c[1],\n        l = _c[2];\n\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  } else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n    var _d = palette.LightVibrant.getHsl(),\n        h = _d[0],\n        s = _d[1],\n        l = _d[2];\n\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n    var _e = palette.Vibrant.getHsl(),\n        h = _e[0],\n        s = _e[1],\n        l = _e[2];\n\n    l = opts.targetDarkLuma;\n    palette.DarkVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.LightVibrant === null && palette.Vibrant !== null) {\n    var _f = palette.Vibrant.getHsl(),\n        h = _f[0],\n        s = _f[1],\n        l = _f[2];\n\n    l = opts.targetLightLuma;\n    palette.LightVibrant = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.Muted === null && palette.Vibrant !== null) {\n    var _g = palette.Vibrant.getHsl(),\n        h = _g[0],\n        s = _g[1],\n        l = _g[2];\n\n    l = opts.targetMutesSaturation;\n    palette.Muted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n    var _h = palette.DarkVibrant.getHsl(),\n        h = _h[0],\n        s = _h[1],\n        l = _h[2];\n\n    l = opts.targetMutesSaturation;\n    palette.DarkMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n\n  if (palette.LightMuted === null && palette.LightVibrant !== null) {\n    var _j = palette.LightVibrant.getHsl(),\n        h = _j[0],\n        s = _j[1],\n        l = _j[2];\n\n    l = opts.targetMutesSaturation;\n    palette.LightMuted = new color_1.Swatch(util_1.hslToRgb(h, s, l), 0);\n  }\n}\n\nvar DefaultGenerator = function (swatches, opts) {\n  opts = defaults({}, opts, DefaultOpts);\n\n  var maxPopulation = _findMaxPopulation(swatches);\n\n  var palette = _generateVariationColors(swatches, maxPopulation, opts);\n\n  _generateEmptySwatches(palette, maxPopulation, opts);\n\n  return palette;\n};\n\nexports.default = DefaultGenerator;","map":{"version":3,"mappings":"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","names":["DefaultOpts","targetDarkLuma","maxDarkLuma","minLightLuma","targetLightLuma","minNormalLuma","targetNormalLuma","maxNormalLuma","targetMutesSaturation","maxMutesSaturation","targetVibrantSaturation","minVibrantSaturation","weightSaturation","weightLuma","weightPopulation","_findMaxPopulation","swatches","p","forEach","s","Math","max","getPopulation","_isAlreadySelected","palette","Vibrant","DarkVibrant","LightVibrant","Muted","DarkMuted","LightMuted","_createComparisonValue","saturation","targetSaturation","luma","targetLuma","population","maxPopulation","opts","weightedMean","values","sum","weightSum","i","length","value","weight","invertDiff","targetValue","abs","_findColorVariation","minLuma","maxLuma","minSaturation","maxSaturation","maxValue","swatch","getHsl","l","_generateVariationColors","_generateEmptySwatches","h","color_1","util_1","DefaultGenerator","defaults","exports"],"sources":["/home/fortnyce/Desktop/work_schedule_assigner/node_modules/node-vibrant/src/generator/default.ts"],"sourcesContent":["import { Swatch, Palette } from '../color'\nimport { Generator } from '../typing'\nimport { hslToRgb } from '../util'\nimport defaults = require('lodash/defaults')\n\ninterface DefaultGeneratorOptions {\n  targetDarkLuma: number,\n  maxDarkLuma: number,\n  minLightLuma: number,\n  targetLightLuma: number,\n  minNormalLuma: number,\n  targetNormalLuma: number,\n  maxNormalLuma: number,\n  targetMutesSaturation: number,\n  maxMutesSaturation: number,\n  targetVibrantSaturation: number,\n  minVibrantSaturation: number,\n  weightSaturation: number,\n  weightLuma: number,\n  weightPopulation: number\n}\n\nconst DefaultOpts: DefaultGeneratorOptions = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n}\n\nfunction _findMaxPopulation (swatches: Array<Swatch>): number {\n  let p = 0\n\n  swatches.forEach((s) => {\n    p = Math.max(p, s.getPopulation())\n  })\n\n  return p\n}\n\nfunction _isAlreadySelected (palette: Palette, s: Swatch): boolean {\n  return palette.Vibrant === s ||\n    palette.DarkVibrant === s ||\n    palette.LightVibrant === s ||\n    palette.Muted === s ||\n    palette.DarkMuted === s ||\n    palette.LightMuted === s\n}\n\nfunction _createComparisonValue (\n  saturation: number, targetSaturation: number,\n  luma: number, targetLuma: number,\n  population: number, maxPopulation: number, opts: DefaultGeneratorOptions): number {\n  function weightedMean (...values: number[]) {\n    let sum = 0\n    let weightSum = 0\n    for (let i = 0; i < values.length; i += 2) {\n      let value = values[i]\n      let weight = values[i + 1]\n      sum += value * weight\n      weightSum += weight\n    }\n\n    return sum / weightSum\n  }\n\n  function invertDiff (value: number, targetValue: number): number {\n    return 1 - Math.abs(value - targetValue)\n  }\n\n  return weightedMean(\n    invertDiff(saturation, targetSaturation), opts.weightSaturation,\n    invertDiff(luma, targetLuma), opts.weightLuma,\n    population / maxPopulation, opts.weightPopulation\n  )\n}\n\nfunction _findColorVariation (palette: Palette, swatches: Array<Swatch>, maxPopulation: number,\n  targetLuma: number,\n  minLuma: number,\n  maxLuma: number,\n  targetSaturation: number,\n  minSaturation: number,\n  maxSaturation: number,\n  opts: DefaultGeneratorOptions): Swatch {\n  let max: Swatch | null = null\n  let maxValue = 0\n\n  swatches.forEach((swatch) => {\n    let [, s, l] = swatch.getHsl()\n\n    if (s >= minSaturation && s <= maxSaturation &&\n      l >= minLuma && l <= maxLuma &&\n      !_isAlreadySelected(palette, swatch)\n    ) {\n      let value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.getPopulation(), maxPopulation, opts)\n\n      if (max === null || value > maxValue) {\n        max = swatch\n        maxValue = value\n      }\n    }\n  })\n\n  return max!\n}\n\nfunction _generateVariationColors (swatches: Array<Swatch>, maxPopulation: number, opts: DefaultGeneratorOptions): Palette {\n  let palette: Palette = {}\n  // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetNormalLuma,\n    opts.minNormalLuma,\n    opts.maxNormalLuma,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetLightLuma,\n    opts.minLightLuma,\n    1,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f);\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetDarkLuma,\n    0,\n    opts.maxDarkLuma,\n    opts.targetVibrantSaturation,\n    opts.minVibrantSaturation,\n    1,\n    opts\n  )\n  // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetNormalLuma,\n    opts.minNormalLuma,\n    opts.maxNormalLuma,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetLightLuma,\n    opts.minLightLuma,\n    1,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION);\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation,\n    opts.targetDarkLuma,\n    0,\n    opts.maxDarkLuma,\n    opts.targetMutesSaturation,\n    0,\n    opts.maxMutesSaturation,\n    opts\n  )\n  return palette\n}\n\nfunction _generateEmptySwatches (palette: Palette, maxPopulation: number, opts: DefaultGeneratorOptions): void {\n  if (palette.Vibrant === null && palette.DarkVibrant === null && palette.LightVibrant === null) {\n    if (palette.DarkVibrant === null && palette.DarkMuted !== null) {\n      let [h, s, l] = palette.DarkMuted!.getHsl()\n      l = opts.targetDarkLuma\n      palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n    }\n    if (palette.LightVibrant === null && palette.LightMuted !== null) {\n      let [h, s, l] = palette.LightMuted!.getHsl()\n      l = opts.targetDarkLuma\n      palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n    }\n  }\n  if (palette.Vibrant === null && palette.DarkVibrant !== null) {\n    let [h, s, l] = palette.DarkVibrant!.getHsl()\n    l = opts.targetNormalLuma\n    palette.Vibrant = new Swatch(hslToRgb(h, s, l), 0)\n  } else if (palette.Vibrant === null && palette.LightVibrant !== null) {\n    let [h, s, l] = palette.LightVibrant!.getHsl()\n    l = opts.targetNormalLuma\n    palette.Vibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (palette.DarkVibrant === null && palette.Vibrant !== null) {\n    let [h, s, l] = palette.Vibrant!.getHsl()\n    l = opts.targetDarkLuma\n    palette.DarkVibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (palette.LightVibrant === null && palette.Vibrant !== null) {\n    let [h, s, l] = palette.Vibrant!.getHsl()\n    l = opts.targetLightLuma\n    palette.LightVibrant = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (palette.Muted === null && palette.Vibrant !== null) {\n    let [h, s, l] = palette.Vibrant!.getHsl()\n    l = opts.targetMutesSaturation\n    palette.Muted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (palette.DarkMuted === null && palette.DarkVibrant !== null) {\n    let [h, s, l] = palette.DarkVibrant!.getHsl()\n    l = opts.targetMutesSaturation\n    palette.DarkMuted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n  if (palette.LightMuted === null && palette.LightVibrant !== null) {\n    let [h, s, l] = palette.LightVibrant!.getHsl()\n    l = opts.targetMutesSaturation\n    palette.LightMuted = new Swatch(hslToRgb(h, s, l), 0)\n  }\n}\n\nconst DefaultGenerator: Generator = (swatches: Array<Swatch>, opts?: DefaultGeneratorOptions): Palette => {\n  opts = <DefaultGeneratorOptions>defaults({}, opts, DefaultOpts)\n  let maxPopulation = _findMaxPopulation(swatches)\n\n  let palette = _generateVariationColors(swatches, maxPopulation, opts)\n  _generateEmptySwatches(palette, maxPopulation, opts)\n\n  return palette\n}\n\nexport default DefaultGenerator\n"]},"metadata":{},"sourceType":"script"}